{
    "name": "C++",
    "ext": ".cpp",

    "tokenable": "^([:;{}]|[=;]|<<|>>|::|\\.|,|[()]|[<>+\\-*/]|\\+=|[0-9]+|[a-zA-Z_][a-zA-Z_0-9]*)$",
    "syntax": {
        "exp": [
            [{ "name": "bracket_closed", "rule": "({a:exp})" }],
            [{ "name": "method_call", "rule": "{obj:exp}.{function:ident}({args:exp_multi})" }],
            [{ "name": "function_call", "rule": "{function:ident}({args:exp_multi})" }],
            [
                { "name": "greater", "rule": "{1:exp} < {2:exp}" },
                { "name": "lesser", "rule": "{1:exp} > {2:exp}" }
            ],
            [
                { "name": "left_shift", "rule": "{1:exp} << {2:exp}" },
                { "name": "right_shift", "rule": "{1:exp} >> {2:exp}" }
            ],
            [
                { "name": "plus", "rule": "{1:exp} + {2:exp}" },
                { "name": "minus", "rule": "{1:exp} - {2:exp}" }
            ],
            [
                { "name": "multiply", "rule": "{1:exp} * {2:exp}" },
                { "name": "divide", "rule": "{1:exp} / {2:exp}" }
            ],
            [{ "name": "member", "rule": "{obj:exp}.{member:ident}" }],
            [{ "name": "context_member", "rule": "{context:ident}::{member:exp}" }],
            [{ "name": "ident", "rule": "{a:ident}" }]
        ],
        "exp_multi": [
            [{ "name": "single", "rule": "{a:exp}" }],
            [{ "name": "recursive", "rule": "{1:exp}, {2:exp_multi}" }]
        ],
        "type": [
            [{ "name": "normal_type", "rule": "{t:ident}" }],
            [{ "name": "const", "rule": "const {t:type}" }],
            [{ "name": "const", "rule": "{t:type} const" }],
            [{ "name": "context", "rule": "{super:type}::{child:type}" }],
            [{ "name": "generics", "rule": "{t:ident}<{args:type_multi}>" }]
        ],
        "type_multi": [
            [{ "name": "single_type", "rule": "{t:type}"}],
            [{ "name": "single_value", "rule": "{a:exp}"}],
            [{ "name": "type_recursive", "rule": "{1:type}, {2:type_multi}" }]
        ],
        "statement": [
            [{ "name": "if", "rule": "if ({condition:exp}) \\{ {a:block} \\}" }],
            [{ "name": "while", "rule": "while ({condition:exp}) \\{ {a:block} \\}" }],
            [{ "name": "for", "rule": "for ({t:type} {iterator:ident} : {range:exp}) \\{ {a:block} \\}" }],
            [{ "name": "", "rule": ";"}],
            [{ "name": "expression", "rule": "{a:exp};"}],
            [{ "name": "declaration_and_init", "rule": "{t:type} {name:ident} = {a:exp};" }],
            [{ "name": "declaration", "rule": "{t:type} {name:ident};" }]
        ],
        "block": [
            [{ "name": "none", "rule": "" }],
            [{ "name": "single", "rule": "{1:statement}" }],
            [{ "name": "recursive_lf", "rule": "{1:statement}\n{2:block}" }],
            [{ "name": "recursive", "rule": "{1:statement}{2:block}" }]
        ]
    }
}